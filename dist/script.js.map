{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/units-converter/dist/umd/index.min.js","webpack:///./src/js/main.js"],"names":["window","addEventListener","unitTypeSelect","document","querySelector","input","unit","fillUnitTypes","unitTypes","acceleration","angle","apparentPower","area","charge","current","digital","each","energy","force","frequency","illuminance","length","mass","pace","partsPer","power","pressure","reactiveEnergy","reactivePower","speed","temperature","time","voltage","volume","volumeFlowRate","options","type","innerHTML","fillUnits","onUnitSelected","convert","value","unitsList","converter","list","singular","unitValue","output","result","best","from","toBest","possibilities","possibility","any","to"],"mappings":"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","file":"script.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/main.js\");\n","!function(r,a){\"object\"==typeof exports&&\"undefined\"!=typeof module?a(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],a):a((r=r||self).converter={})}(this,(function(r){\"use strict\";const a=function(r,a){this.definitions=a,this.val=r};function e(r){return e=>new a(e,r)}a.prototype.from=function(r){if(this.destination)throw new Error(\".from must be called before .to\");return this.origin=this.getUnit(r),this.origin||this.throwUnsupportedUnitError(r),this},a.prototype.to=function(r){if(!this.origin)throw new Error(\".to must be called after .from\");let a;return this.destination=this.getUnit(r),this.destination||this.throwUnsupportedUnitError(r),this.origin.abbr===this.destination.abbr?Object.assign({value:this.val},this.describe(this.destination.abbr)):(a=this.val*this.origin.unit.to_anchor,this.origin.unit.anchor_shift&&(a-=this.origin.unit.anchor_shift),this.origin.system!==this.destination.system&&(a=this.definitions[this.origin.system].transform(a)),void 0!==this.destination.unit.anchor_shift&&(a+=this.destination.unit.anchor_shift),Object.assign({value:a/this.destination.unit.to_anchor},this.describe(this.destination.abbr)))},a.prototype.toBest=function(r){if(!this.origin)throw new Error(\".toBest must be called after .from\");return r=Object.assign({exclude:[],cutOffNumber:1},r),this.list().filter(a=>!r.exclude.includes(a.unit)&&this.describe(a.unit).system===this.origin.system).reduce((a,e)=>{const n=this.to(e.unit);return!a||n.value>=r.cutOffNumber&&n.value<a.value?n:a},void 0)},a.prototype.getUnit=function(r){const a=Object.keys(this.definitions).map(a=>{if(this.definitions[a][r])return{abbr:r,system:a,unit:this.definitions[a][r]}}).filter(r=>void 0!==r);return Array.isArray(a)?a[0]:void 0},a.prototype.list=function(){return this.possibilities().map(r=>this.describe(r))},a.prototype.throwUnsupportedUnitError=function(r){throw new Error(\"Unsupported unit \"+r)},a.prototype.describe=function(r){if(!r)throw new Error(\"You must select a unit\");const a=this.getUnit(r);return{unit:a.abbr,system:a.system,singular:a.unit.name.singular,plural:a.unit.name.plural}},a.prototype.possibilities=function(){return Array.prototype.concat(...Object.keys(this.definitions).map(r=>Object.keys(this.definitions[r]).splice(2)))};var n=e({metric:{baseUnit:\"g-force\",transform:r=>1*r,\"g-force\":{name:{singular:\"g-force\",plural:\"g-forces\"},to_anchor:9.80665},\"m/s2\":{name:{singular:\"Metre per second squared\",plural:\"Metres per second squared\"},to_anchor:1}}});var l=e({metric:{baseUnit:\"g-force\",transform:r=>1*r,rad:{name:{singular:\"radian\",plural:\"radians\"},to_anchor:57.29577951308232},deg:{name:{singular:\"degree\",plural:\"degrees\"},to_anchor:1},grad:{name:{singular:\"gradian\",plural:\"gradians\"},to_anchor:.9},arcmin:{name:{singular:\"arcminute\",plural:\"arcminutes\"},to_anchor:1/60},arcsec:{name:{singular:\"arcsecond\",plural:\"arcseconds\"},to_anchor:1/3600}}});var o=e({metric:{baseUnit:\"VA\",transform:r=>1*r,VA:{name:{singular:\"Volt-Ampere\",plural:\"Volt-Amperes\"},to_anchor:1},mVA:{name:{singular:\"Millivolt-Ampere\",plural:\"Millivolt-Amperes\"},to_anchor:.001},kVA:{name:{singular:\"Kilovolt-Ampere\",plural:\"Kilovolt-Amperes\"},to_anchor:1e3},MVA:{name:{singular:\"Megavolt-Ampere\",plural:\"Megavolt-Amperes\"},to_anchor:1e6},GVA:{name:{singular:\"Gigavolt-Ampere\",plural:\"Gigavolt-Amperes\"},to_anchor:1e9}}});var t=e({metric:{baseUnit:\"m2\",transform:r=>10.7639*r,mm2:{name:{singular:\"Square Millimeter\",plural:\"Square Millimeters\"},to_anchor:1e-6},cm2:{name:{singular:\"Square Centimeter\",plural:\"Square Centimeters\"},to_anchor:1e-4},m2:{name:{singular:\"Square Meter\",plural:\"Square Meters\"},to_anchor:1},ha:{name:{singular:\"Hectare\",plural:\"Hectares\"},to_anchor:1e4},km2:{name:{singular:\"Square Kilometer\",plural:\"Square Kilometers\"},to_anchor:1e6}},imperial:{baseUnit:\"ft2\",transform:r=>1*r/10.7639,in2:{name:{singular:\"Square Inch\",plural:\"Square Inches\"},to_anchor:1/144},yd2:{name:{singular:\"Square Yard\",plural:\"Square Yards\"},to_anchor:9},ft2:{name:{singular:\"Square Foot\",plural:\"Square Feet\"},to_anchor:1},ac:{name:{singular:\"Acre\",plural:\"Acres\"},to_anchor:43560},mi2:{name:{singular:\"Square Mile\",plural:\"Square Miles\"},to_anchor:27878400}}});var i=e({metric:{baseUnit:\"c\",transform:r=>1*r,c:{name:{singular:\"Coulomb\",plural:\"Coulombs\"},to_anchor:1},mC:{name:{singular:\"Millicoulomb\",plural:\"Millicoulombs\"},to_anchor:.001},\"μC\":{name:{singular:\"Microcoulomb\",plural:\"Microcoulombs\"},to_anchor:1e-6},nC:{name:{singular:\"Nanocoulomb\",plural:\"Nanocoulombs\"},to_anchor:1e-9},pC:{name:{singular:\"Picocoulomb\",plural:\"Picocoulombs\"},to_anchor:1e-12}}});var s=e({metric:{baseUnit:\"a\",transform:r=>1*r,A:{name:{singular:\"Ampere\",plural:\"Amperes\"},to_anchor:1},mA:{name:{singular:\"Milliampere\",plural:\"Milliamperes\"},to_anchor:.001},kA:{name:{singular:\"Kiloampere\",plural:\"Kiloamperes\"},to_anchor:1e3}}});var u=e({bits:{baseUnit:\"b\",transform:r=>1*r/8,b:{name:{singular:\"Bit\",plural:\"Bits\"},to_anchor:1},Kb:{name:{singular:\"Kilobit\",plural:\"Kilobits\"},to_anchor:1024},Mb:{name:{singular:\"Megabit\",plural:\"Megabits\"},to_anchor:1048576},Gb:{name:{singular:\"Gigabit\",plural:\"Gigabits\"},to_anchor:1073741824},Tb:{name:{singular:\"Terabit\",plural:\"Terabits\"},to_anchor:1099511627776}},bytes:{baseUnit:\"B\",transform:r=>8*r,B:{name:{singular:\"Byte\",plural:\"Bytes\"},to_anchor:1},KB:{name:{singular:\"Kilobyte\",plural:\"Kilobytes\"},to_anchor:1024},MB:{name:{singular:\"Megabyte\",plural:\"Megabytes\"},to_anchor:1048576},GB:{name:{singular:\"Gigabyte\",plural:\"Gigabytes\"},to_anchor:1073741824},TB:{name:{singular:\"Terabyte\",plural:\"Terabytes\"},to_anchor:1099511627776}}});var c=e({metric:{baseUnit:\"ea\",transform:r=>1*r,ea:{name:{singular:\"Each\",plural:\"Each\"},to_anchor:1},dz:{name:{singular:\"Dozen\",plural:\"Dozens\"},to_anchor:12}}});var m=e({metric:{baseUnit:\"J\",transform:r=>1*r,Wh:{name:{singular:\"Watt-hour\",plural:\"Watt-hours\"},to_anchor:3600},mWh:{name:{singular:\"Milliwatt-hour\",plural:\"Milliwatt-hours\"},to_anchor:3.6},kWh:{name:{singular:\"Kilowatt-hour\",plural:\"Kilowatt-hours\"},to_anchor:36e5},MWh:{name:{singular:\"Megawatt-hour\",plural:\"Megawatt-hours\"},to_anchor:36e8},GWh:{name:{singular:\"Gigawatt-hour\",plural:\"Gigawatt-hours\"},to_anchor:36e11},J:{name:{singular:\"Joule\",plural:\"Joules\"},to_anchor:1},kJ:{name:{singular:\"Kilojoule\",plural:\"Kilojoules\"},to_anchor:1e3}}});var p=e({metric:{baseUnit:\"N\",transform:r=>1*r/4.44822,N:{name:{singular:\"Newton\",plural:\"Newtons\"},to_anchor:1},kN:{name:{singular:\"Kilonewton\",plural:\"Kilonewtons\"},to_anchor:1e3}},imperial:{baseUnit:\"lbf\",transform:r=>4.44822*r,lbf:{name:{singular:\"Pound-force\",plural:\"Pound-forces\"},to_anchor:1}}});var h=e({metric:{baseUnit:\"Hz\",transform:r=>1*r,mHz:{name:{singular:\"millihertz\",plural:\"millihertz\"},to_anchor:.001},Hz:{name:{singular:\"hertz\",plural:\"hertz\"},to_anchor:1},kHz:{name:{singular:\"kilohertz\",plural:\"kilohertz\"},to_anchor:1e3},MHz:{name:{singular:\"megahertz\",plural:\"megahertz\"},to_anchor:1e6},GHz:{name:{singular:\"gigahertz\",plural:\"gigahertz\"},to_anchor:1e9},THz:{name:{singular:\"terahertz\",plural:\"terahertz\"},to_anchor:1e12},rpm:{name:{singular:\"rotation per minute\",plural:\"rotations per minute\"},to_anchor:1/60},\"deg/s\":{name:{singular:\"degree per second\",plural:\"degrees per second\"},to_anchor:1/360},\"rad/s\":{name:{singular:\"radian per second\",plural:\"radians per second\"},to_anchor:.15915494309189535}}});var g=e({metric:{baseUnit:\"lx\",transform:r=>1*r/10.76391,lx:{name:{singular:\"Lux\",plural:\"Lux\"},to_anchor:1}},imperial:{baseUnit:\"ft-cd\",transform:r=>10.76391*r,\"ft-cd\":{name:{singular:\"Foot-candle\",plural:\"Foot-candles\"},to_anchor:1}}});var _=e({metric:{baseUnit:\"m\",transform:r=>3.28084*r,mm:{name:{singular:\"Millimeter\",plural:\"Millimeters\"},to_anchor:.001},cm:{name:{singular:\"Centimeter\",plural:\"Centimeters\"},to_anchor:.01},m:{name:{singular:\"Meter\",plural:\"Meters\"},to_anchor:1},km:{name:{singular:\"Kilometer\",plural:\"Kilometers\"},to_anchor:1e3}},imperial:{baseUnit:\"ft\",transform:r=>1*r/3.28084,in:{name:{singular:\"Inch\",plural:\"Inches\"},to_anchor:1/12},yd:{name:{singular:\"Yard\",plural:\"Yards\"},to_anchor:3},\"ft-us\":{name:{singular:\"US Survey Foot\",plural:\"US Survey Feet\"},to_anchor:1.000002},ft:{name:{singular:\"Foot\",plural:\"Feet\"},to_anchor:1},fathom:{name:{singular:\"Fathom\",plural:\"Fathoms\"},to_anchor:6},mi:{name:{singular:\"Mile\",plural:\"Miles\"},to_anchor:5280},nMi:{name:{singular:\"Nautical Mile\",plural:\"Nautical Miles\"},to_anchor:6076.12}}});var d=e({metric:{baseUnit:\"g\",transform:r=>1*r/453.592,mcg:{name:{singular:\"Microgram\",plural:\"Micrograms\"},to_anchor:1e-6},mg:{name:{singular:\"Milligram\",plural:\"Milligrams\"},to_anchor:.001},g:{name:{singular:\"Gram\",plural:\"Grams\"},to_anchor:1},kg:{name:{singular:\"Kilogram\",plural:\"Kilograms\"},to_anchor:1e3},mt:{name:{singular:\"Metric Tonne\",plural:\"Metric Tonnes\"},to_anchor:1e6}},imperial:{baseUnit:\"lb\",transform:r=>453.592*r,oz:{name:{singular:\"Ounce\",plural:\"Ounces\"},to_anchor:1/16},lb:{name:{singular:\"Pound\",plural:\"Pounds\"},to_anchor:1},t:{name:{singular:\"Ton\",plural:\"Tons\"},to_anchor:2e3}}});var b=e({metric:{baseUnit:\"s/m\",transform:r=>.3048*r,\"min/km\":{name:{singular:\"Minute per kilometre\",plural:\"Minutes per kilometre\"},to_anchor:.06},\"s/m\":{name:{singular:\"Second per metre\",plural:\"Seconds per metre\"},to_anchor:1}},imperial:{baseUnit:\"s/ft\",transform:r=>1*r/.3048,\"min/mi\":{name:{singular:\"Minute per mile\",plural:\"Minutes per mile\"},to_anchor:.0113636},\"s/ft\":{name:{singular:\"Second per foot\",plural:\"Seconds per foot\"},to_anchor:1}}});var f=e({metric:{baseUnit:\"ppm\",transform:r=>1e-6*r,ppm:{name:{singular:\"Part-per Million\",plural:\"Parts-per Million\"},to_anchor:1},ppb:{name:{singular:\"Part-per Billion\",plural:\"Parts-per Billion\"},to_anchor:.001},ppt:{name:{singular:\"Part-per Trillion\",plural:\"Parts-per Trillion\"},to_anchor:1e-6},ppq:{name:{singular:\"Part-per Quadrillion\",plural:\"Parts-per Quadrillion\"},to_anchor:1e-9}}});var v=e({metric:{baseUnit:\"W\",transform:r=>1*r,W:{name:{singular:\"Watt\",plural:\"Watts\"},to_anchor:1},mW:{name:{singular:\"Milliwatt\",plural:\"Milliwatts\"},to_anchor:.001},kW:{name:{singular:\"Kilowatt\",plural:\"Kilowatts\"},to_anchor:1e3},MW:{name:{singular:\"Megawatt\",plural:\"Megawatts\"},to_anchor:1e6},GW:{name:{singular:\"Gigawatt\",plural:\"Gigawatts\"},to_anchor:1e9}}});var M=e({metric:{baseUnit:\"kPa\",transform:r=>.00014503768078*r,Pa:{name:{singular:\"pascal\",plural:\"pascals\"},to_anchor:.001},kPa:{name:{singular:\"kilopascal\",plural:\"kilopascals\"},to_anchor:1},MPa:{name:{singular:\"megapascal\",plural:\"megapascals\"},to_anchor:1e3},hPa:{name:{singular:\"hectopascal\",plural:\"hectopascals\"},to_anchor:.1},bar:{name:{singular:\"bar\",plural:\"bar\"},to_anchor:100},torr:{name:{singular:\"torr\",plural:\"torr\"},to_anchor:101325/76e4}},imperial:{baseUnit:\"psi\",transform:r=>1*r/.00014503768078,psi:{name:{singular:\"pound per square inch\",plural:\"pounds per square inch\"},to_anchor:.001},ksi:{name:{singular:\"kilopound per square inch\",plural:\"kilopound per square inch\"},to_anchor:1}}});var C=e({metric:{baseUnit:\"VARh\",transform:r=>1*r,VARh:{name:{singular:\"Volt-Ampere Reactive Hour\",plural:\"Volt-Amperes Reactive Hour\"},to_anchor:1},mVARh:{name:{singular:\"Millivolt-Ampere Reactive Hour\",plural:\"Millivolt-Amperes Reactive Hour\"},to_anchor:.001},kVARh:{name:{singular:\"Kilovolt-Ampere Reactive Hour\",plural:\"Kilovolt-Amperes Reactive Hour\"},to_anchor:1e3},MVARh:{name:{singular:\"Megavolt-Ampere Reactive Hour\",plural:\"Megavolt-Amperes Reactive Hour\"},to_anchor:1e6},GVARh:{name:{singular:\"Gigavolt-Ampere Reactive Hour\",plural:\"Gigavolt-Amperes Reactive Hour\"},to_anchor:1e9}}});var k=e({metric:{baseUnit:\"VAR\",transform:r=>1*r,VAR:{name:{singular:\"Volt-Ampere Reactive\",plural:\"Volt-Amperes Reactive\"},to_anchor:1},mVAR:{name:{singular:\"Millivolt-Ampere Reactive\",plural:\"Millivolt-Amperes Reactive\"},to_anchor:.001},kVAR:{name:{singular:\"Kilovolt-Ampere Reactive\",plural:\"Kilovolt-Amperes Reactive\"},to_anchor:1e3},MVAR:{name:{singular:\"Megavolt-Ampere Reactive\",plural:\"Megavolt-Amperes Reactive\"},to_anchor:1e6},GVAR:{name:{singular:\"Gigavolt-Ampere Reactive\",plural:\"Gigavolt-Amperes Reactive\"},to_anchor:1e9}}});var y=e({metric:{baseUnit:\"N\",transform:r=>1*r/1.609344,\"m/s\":{name:{singular:\"Metre per second\",plural:\"Metres per second\"},to_anchor:3.6},\"km/h\":{name:{singular:\"Kilometre per hour\",plural:\"Kilometres per hour\"},to_anchor:1}},imperial:{baseUnit:\"m/h\",transform:r=>1.609344*r,\"m/h\":{name:{singular:\"Mile per hour\",plural:\"Miles per hour\"},to_anchor:1},knot:{name:{singular:\"Knot\",plural:\"Knots\"},to_anchor:1.150779},\"ft/s\":{name:{singular:\"Foot per second\",plural:\"Feet per second\"},to_anchor:.681818}}});var A=e({metric:{baseUnit:\"C\",transform:r=>r/(5/9)+32,C:{name:{singular:\"degree Celsius\",plural:\"degrees Celsius\"},to_anchor:1,anchor_shift:0},K:{name:{singular:\"degree Kelvin\",plural:\"degrees Kelvin\"},to_anchor:1,anchor_shift:273.15}},imperial:{baseUnit:\"F\",transform:r=>5/9*(r-32),F:{name:{singular:\"degree Fahrenheit\",plural:\"degrees Fahrenheit\"},to_anchor:1},R:{name:{singular:\"degree Rankine\",plural:\"degrees Rankine\"},to_anchor:1,anchor_shift:459.67}}});var U=e({metric:{baseUnit:\"s\",transform:r=>1*r,ns:{name:{singular:\"Nanosecond\",plural:\"Nanoseconds\"},to_anchor:1e-9},mu:{name:{singular:\"Microsecond\",plural:\"Microseconds\"},to_anchor:1e-6},ms:{name:{singular:\"Millisecond\",plural:\"Milliseconds\"},to_anchor:.001},s:{name:{singular:\"Second\",plural:\"Seconds\"},to_anchor:1},min:{name:{singular:\"Minute\",plural:\"Minutes\"},to_anchor:60},h:{name:{singular:\"Hour\",plural:\"Hours\"},to_anchor:3600},d:{name:{singular:\"Day\",plural:\"Days\"},to_anchor:86400},week:{name:{singular:\"Week\",plural:\"Weeks\"},to_anchor:604800},month:{name:{singular:\"Month\",plural:\"Months\"},to_anchor:2629800},year:{name:{singular:\"Year\",plural:\"Years\"},to_anchor:31557600}}});var K=e({metric:{baseUnit:\"V\",transform:r=>1*r,V:{name:{singular:\"Volt\",plural:\"Volts\"},to_anchor:1},mV:{name:{singular:\"Millivolt\",plural:\"Millivolts\"},to_anchor:.001},kV:{name:{singular:\"Kilovolt\",plural:\"Kilovolts\"},to_anchor:1e3}}});var w=e({metric:{baseUnit:\"l\",transform:r=>33.8140226*r,mm3:{name:{singular:\"Cubic Millimeter\",plural:\"Cubic Millimeters\"},to_anchor:1e-6},cm3:{name:{singular:\"Cubic Centimeter\",plural:\"Cubic Centimeters\"},to_anchor:.001},ml:{name:{singular:\"Millilitre\",plural:\"Millilitres\"},to_anchor:.001},cl:{name:{singular:\"Centilitre\",plural:\"Centilitres\"},to_anchor:.01},dl:{name:{singular:\"Decilitre\",plural:\"Decilitres\"},to_anchor:.1},l:{name:{singular:\"Litre\",plural:\"Litres\"},to_anchor:1},kl:{name:{singular:\"Kilolitre\",plural:\"Kilolitres\"},to_anchor:1e3},m3:{name:{singular:\"Cubic meter\",plural:\"Cubic meters\"},to_anchor:1e3},km3:{name:{singular:\"Cubic kilometer\",plural:\"Cubic kilometers\"},to_anchor:1e12},krm:{name:{singular:\"Matsked\",plural:\"Matskedar\"},to_anchor:.001},tsk:{name:{singular:\"Tesked\",plural:\"Teskedar\"},to_anchor:.005},msk:{name:{singular:\"Matsked\",plural:\"Matskedar\"},to_anchor:.015},kkp:{name:{singular:\"Kaffekopp\",plural:\"Kaffekoppar\"},to_anchor:.15},glas:{name:{singular:\"Glas\",plural:\"Glas\"},to_anchor:.2},kanna:{name:{singular:\"Kanna\",plural:\"Kannor\"},to_anchor:2.617}},imperial:{baseUnit:\"fl-oz\",transform:r=>1*r/33.8140226,tsp:{name:{singular:\"Teaspoon\",plural:\"Teaspoons\"},to_anchor:1/6},Tbs:{name:{singular:\"Tablespoon\",plural:\"Tablespoons\"},to_anchor:.5},in3:{name:{singular:\"Cubic inch\",plural:\"Cubic inches\"},to_anchor:.55411},\"fl-oz\":{name:{singular:\"Fluid Ounce\",plural:\"Fluid Ounces\"},to_anchor:1},cup:{name:{singular:\"Cup\",plural:\"Cups\"},to_anchor:8},pnt:{name:{singular:\"Pint\",plural:\"Pints\"},to_anchor:16},qt:{name:{singular:\"Quart\",plural:\"Quarts\"},to_anchor:32},gal:{name:{singular:\"Gallon\",plural:\"Gallons\"},to_anchor:128},ft3:{name:{singular:\"Cubic foot\",plural:\"Cubic feet\"},to_anchor:957.506},yd3:{name:{singular:\"Cubic yard\",plural:\"Cubic yards\"},to_anchor:25852.7}}});var R=e({metric:{baseUnit:\"l/s\",transform:r=>33.8140227*r,\"mm3/s\":{name:{singular:\"Cubic Millimeter per second\",plural:\"Cubic Millimeters per second\"},to_anchor:1e-6},\"cm3/s\":{name:{singular:\"Cubic Centimeter per second\",plural:\"Cubic Centimeters per second\"},to_anchor:.001},\"ml/s\":{name:{singular:\"Millilitre per second\",plural:\"Millilitres per second\"},to_anchor:.001},\"cl/s\":{name:{singular:\"Centilitre per second\",plural:\"Centilitres per second\"},to_anchor:.01},\"dl/s\":{name:{singular:\"Decilitre per second\",plural:\"Decilitres per second\"},to_anchor:.1},\"l/s\":{name:{singular:\"Litre per second\",plural:\"Litres per second\"},to_anchor:1},\"l/min\":{name:{singular:\"Litre per minute\",plural:\"Litres per minute\"},to_anchor:1/60},\"l/h\":{name:{singular:\"Litre per hour\",plural:\"Litres per hour\"},to_anchor:1/3600},\"kl/s\":{name:{singular:\"Kilolitre per second\",plural:\"Kilolitres per second\"},to_anchor:1e3},\"kl/min\":{name:{singular:\"Kilolitre per minute\",plural:\"Kilolitres per minute\"},to_anchor:50/3},\"kl/h\":{name:{singular:\"Kilolitre per hour\",plural:\"Kilolitres per hour\"},to_anchor:5/18},\"m3/s\":{name:{singular:\"Cubic meter per second\",plural:\"Cubic meters per second\"},to_anchor:1e3},\"m3/min\":{name:{singular:\"Cubic meter per minute\",plural:\"Cubic meters per minute\"},to_anchor:50/3},\"m3/h\":{name:{singular:\"Cubic meter per hour\",plural:\"Cubic meters per hour\"},to_anchor:5/18},\"km3/s\":{name:{singular:\"Cubic kilometer per second\",plural:\"Cubic kilometers per second\"},to_anchor:1e12}},imperial:{baseUnit:\"fl-oz/s\",transform:r=>1*r/33.8140227,\"tsp/s\":{name:{singular:\"Teaspoon per second\",plural:\"Teaspoons per second\"},to_anchor:1/6},\"Tbs/s\":{name:{singular:\"Tablespoon per second\",plural:\"Tablespoons per second\"},to_anchor:.5},\"in3/s\":{name:{singular:\"Cubic inch per second\",plural:\"Cubic inches per second\"},to_anchor:.55411},\"in3/min\":{name:{singular:\"Cubic inch per minute\",plural:\"Cubic inches per minute\"},to_anchor:.55411/60},\"in3/h\":{name:{singular:\"Cubic inch per hour\",plural:\"Cubic inches per hour\"},to_anchor:.55411/3600},\"fl-oz/s\":{name:{singular:\"Fluid Ounce per second\",plural:\"Fluid Ounces per second\"},to_anchor:1},\"fl-oz/min\":{name:{singular:\"Fluid Ounce per minute\",plural:\"Fluid Ounces per minute\"},to_anchor:1/60},\"fl-oz/h\":{name:{singular:\"Fluid Ounce per hour\",plural:\"Fluid Ounces per hour\"},to_anchor:1/3600},\"cup/s\":{name:{singular:\"Cup per second\",plural:\"Cups per second\"},to_anchor:8},\"pnt/s\":{name:{singular:\"Pint per second\",plural:\"Pints per second\"},to_anchor:16},\"pnt/min\":{name:{singular:\"Pint per minute\",plural:\"Pints per minute\"},to_anchor:4/15},\"pnt/h\":{name:{singular:\"Pint per hour\",plural:\"Pints per hour\"},to_anchor:1/225},\"qt/s\":{name:{singular:\"Quart per second\",plural:\"Quarts per second\"},to_anchor:32},\"gal/s\":{name:{singular:\"Gallon per second\",plural:\"Gallons per second\"},to_anchor:128},\"gal/min\":{name:{singular:\"Gallon per minute\",plural:\"Gallons per minute\"},to_anchor:32/15},\"gal/h\":{name:{singular:\"Gallon per hour\",plural:\"Gallons per hour\"},to_anchor:8/225},\"ft3/s\":{name:{singular:\"Cubic foot per second\",plural:\"Cubic feet per second\"},to_anchor:957.506},\"ft3/min\":{name:{singular:\"Cubic foot per minute\",plural:\"Cubic feet per minute\"},to_anchor:957.506/60},\"ft3/h\":{name:{singular:\"Cubic foot per hour\",plural:\"Cubic feet per hour\"},to_anchor:957.506/3600},\"yd3/s\":{name:{singular:\"Cubic yard per second\",plural:\"Cubic yards per second\"},to_anchor:25852.7},\"yd3/min\":{name:{singular:\"Cubic yard per minute\",plural:\"Cubic yards per minute\"},to_anchor:25852.7/60},\"yd3/h\":{name:{singular:\"Cubic yard per hour\",plural:\"Cubic yards per hour\"},to_anchor:25852.7/3600}}});r.acceleration=n,r.angle=l,r.apparentPower=o,r.area=t,r.charge=i,r.current=s,r.digital=u,r.each=c,r.energy=m,r.force=p,r.frequency=h,r.illuminance=g,r.length=_,r.mass=d,r.pace=b,r.partsPer=f,r.power=v,r.pressure=M,r.reactiveEnergy=C,r.reactivePower=k,r.speed=y,r.temperature=A,r.time=U,r.voltage=K,r.volume=w,r.volumeFlowRate=R}));","import * as converter from 'units-converter';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n\n    const unitTypeSelect = document.querySelector(\"#unit-type\");\n    const input = document.querySelector(\"#input\");\n    const unit = document.querySelector(\"#unit\");\n\n    const fillUnitTypes = () => {\n        const unitTypes = {\n            acceleration: 'Acceleration',\n            angle: 'Angle',\n            apparentPower: 'Apparent power',\n            area: 'Area',\n            charge: 'Charge',\n            current: 'Current',\n            digital: 'Digital',\n            each: 'Each',\n            energy: 'Energy',\n            force: 'Force',\n            frequency: 'Frequency',\n            illuminance: 'Illuminance',\n            length: 'Length',\n            mass: 'Mass',\n            pace: 'Pace',\n            partsPer: 'Parts-Per',\n            power: 'Power',\n            pressure: 'Pressure',\n            reactiveEnergy: 'Reactive Energy',\n            reactivePower: 'Reactive Power',\n            speed: 'Speed',\n            temperature: 'Temperature',\n            time: 'Time',\n            voltage: 'Voltage',\n            volume: 'Volume',\n            volumeFlowRate: 'Volume Flow Rate',\n        };\n        let options = '';\n\n        for (let type in unitTypes) {\n            options += `\n                <option label=\"${unitTypes[type]}\">${type}</option>\n            `;\n        }\n\n        unitTypeSelect.innerHTML = options;\n\n        fillUnits();\n    };\n\n    const onUnitSelected = () => {\n        fillUnits();\n        convert();\n    };\n\n    const fillUnits = () => {\n        const type = unitTypeSelect.value;\n        const unitsList = converter[type]().list();\n        let options = '';\n\n        for (let unit of unitsList) {\n            options += `\n                <option label=\"${unit.unit} (${unit.singular})\">${unit.unit}</option>\n            `;\n        }\n\n        unit.innerHTML = options;\n    };\n\n    const convert = () => {\n\n        const value = input.value;\n        const unitValue = unit.value;\n        const type = unitTypeSelect.value;\n        const output = document.querySelector(\"#output\");\n        let result = '';\n\n        // best - the smallest unit with a value above 1\n        const best = converter[type](value).from(unitValue).toBest();\n\n        result += `\n          <div class=\"card bg-primary mb-3\">\n            <div class=\"card-header\" id=\"card-1\">\n              <h4>${best.unit} (${best.singular})</h4>\n              <div class=\"fnt-20\">${best.value || 0}</div>\n            </div>\n          </div>\n        `;\n\n        // all possible\n        const possibilities = converter[type](value).from(unitValue).possibilities();\n        for (let possibility of possibilities) {\n            const any = converter[type](value).from(unitValue).to(possibility);\n\n            result += `\n                <div class=\"card bg-success mb-3\">\n                    <div class=\"card-header\" id=\"card-1\">\n                    <h4>${any.unit} (${any.singular})</h4>\n                    <div class=\"fnt-20\">${any.value || 0}</div>\n                    </div>\n                </div>\n                `;\n        }\n\n        output.innerHTML = result;\n    };\n\n    fillUnitTypes();\n\n    unitTypeSelect.addEventListener(\"input\", onUnitSelected);\n    input.addEventListener(\"input\", convert);\n    unit.addEventListener(\"input\", convert);\n\n});"],"sourceRoot":""}